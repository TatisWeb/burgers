{"ast":null,"code":"var _jsxFileName = \"/storage/emulated/0/ASTRO/projects/landing/src/components/App.js\";\nimport React from 'react';\nimport Header from './header';\nimport MenuAdmin from './menuadmin';\nimport Order from './order';\nimport Burger from './Burger';\nimport sampleBurgers from '../sample-burgers';\nimport base from '../base';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      burgers: {},\n      order: {}\n    };\n\n    this.addBurger = burger => {\n      // Создаем копию обьекта state\n      const burgers = { ...this.state.burgers\n      }; //Добавить новую бургер в переменную burger\n\n      burgers[`burger${Date.now()}`] = burger; //записать новый обьект в state\n\n      this.setState({\n        burgers\n      });\n    };\n\n    this.loadSampleBurgers = () => {\n      this.setState({\n        burgers: sampleBurgers\n      });\n    };\n\n    this.addToOrder = key => {\n      //делаем копию стейт\n      const order = { ...this.state.order\n      }; //берём переменную ордер и обьекте по ключу добавляем 1\n\n      order[key] = order[key] + 1 || 1; // обновляем стейт\n\n      this.setState({\n        order\n      });\n    };\n  }\n\n  componentDidMount() {\n    const {\n      params\n    } = this.props.match;\n    const localStorageRef = localStorage.getItem(params.restaurantId);\n\n    if (localStorageRef) {\n      this.setState({\n        order: JSON.parse(localStorageRef)\n      });\n    }\n\n    this.ref = base.syncState(`${params.restaurantId}/burgers`, {\n      context: this,\n      state: 'burgers'\n    });\n  }\n\n  componentDidUpdate() {\n    const {\n      params\n    } = this.props.match;\n    localStorage.setItem(params.restaurantId, JSON.stringify(this.state.order));\n  }\n\n  componentWillUnmount() {\n    base.removeBinding(this.ref);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"burger-paraduse\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      title: \"Very Hot Burger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"burgers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }\n    }, Object.keys(this.state.burgers).map(key => {\n      return /*#__PURE__*/React.createElement(Burger, {\n        key: key,\n        index: key,\n        addToOrder: this.addToOrder,\n        details: this.state.burgers[key],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 10\n        }\n      });\n    }))), /*#__PURE__*/React.createElement(Order, {\n      burgers: this.state.burgers,\n      order: this.state.order,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(MenuAdmin, {\n      addBurger: this.addBurger,\n      loadSampleBurgers: this.loadSampleBurgers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/storage/emulated/0/ASTRO/projects/landing/src/components/App.js"],"names":["React","Header","MenuAdmin","Order","Burger","sampleBurgers","base","App","Component","state","burgers","order","addBurger","burger","Date","now","setState","loadSampleBurgers","addToOrder","key","componentDidMount","params","props","match","localStorageRef","localStorage","getItem","restaurantId","JSON","parse","ref","syncState","context","componentDidUpdate","setItem","stringify","componentWillUnmount","removeBinding","render","Object","keys","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Header from './header';\nimport MenuAdmin from './menuadmin';\nimport Order from './order';\nimport Burger from './Burger';\nimport sampleBurgers from '../sample-burgers';\nimport base from '../base';\n\nclass App extends React.Component {\n    \n    \n\n  state = {\n    burgers: {},\n    order: {}\n  };\n  \n  componentDidMount() {\n    const { params } = this.props.match;\n\n    const localStorageRef = localStorage.getItem(params.restaurantId);\n    if (localStorageRef) {\n      this.setState({ order: JSON.parse(localStorageRef) });\n    }\n\n    this.ref = base.syncState(`${params.restaurantId}/burgers`, {\n      context: this,\n      state: 'burgers'\n    });\n  }\n  \n  componentDidUpdate() {\n    const { params } = this.props.match;\n    localStorage.setItem(params.restaurantId, JSON.stringify(this.state.order));\n  }\n\n  componentWillUnmount() {\n    base.removeBinding(this.ref);\n  }\n\n    \n    addBurger = burger => {\n        \n        // Создаем копию обьекта state\n        const  burgers = { ...this.state.burgers };\n       \n        //Добавить новую бургер в переменную burger\n        \n        burgers[`burger${Date.now()}`] = burger;\n        \n        //записать новый обьект в state\n        \n        this.setState({burgers});\n            \n    };\n    \n    loadSampleBurgers = () => {\n        this.setState({burgers: sampleBurgers});\n          \n    }\n    \n    addToOrder = (key) => {\n    //делаем копию стейт\n    const order = {...this.state.order};\n    //берём переменную ордер и обьекте по ключу добавляем 1\n    order[key] = order[key] +1 || 1;\n    // обновляем стейт\n     this.setState({order});\n    \n    }\n    \n    render() {\n        return(\n        \n        <div className=\"burger-paraduse\">\n        <div className=\"menu\">\n        \n        <Header title=\"Very Hot Burger\"/>\n              <ul className=\"burgers\">\n        {Object.keys(this.state.burgers).map(key =>{\n            return (\n         <Burger \n          key={key}\n          index={key}\n          addToOrder={this.addToOrder}\n          details={this.state.burgers[key]}\n         />\n         )\n         })}\n         \n         </ul>\n        \n        \n        \n        </div>\n        \n        <Order\n        burgers={this.state.burgers}\n        order={this.state.order}\n         />\n        <MenuAdmin addBurger={this.addBurger}\n        loadSampleBurgers={this.loadSampleBurgers}\n        />\n       \n        </div>\n        \n        \n        )\n    }\n    }\nexport default App;"]},"metadata":{},"sourceType":"module"}